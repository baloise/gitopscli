{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitOps CLI","text":"<p>A command line interface to perform operations on GitOps managed infrastructure repositories.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Update YAML values in config repository to e.g. deploy an application</li> <li>Add pull request comments</li> <li>Create and delete preview environments in the config repository for a pull request in an app repository</li> <li>Update root config repository with all apps from child config repositories</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>This project adheres to Semantic Versioning. You can find the changelog in the Github releases.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in GitOps CLI. Your contributions are highly welcome.</p> <p>There are multiple ways of getting involved:</p> <ul> <li>Report a bug </li> <li>Suggest a feature </li> <li>Contribute code </li> </ul> <p>Below are a few guidelines we would like you to follow. If you need help, please reach out to us by opening an issue.</p>"},{"location":"contributing/#report-a-bug","title":"Report a bug","text":"<p>Reporting bugs is one of the best ways to contribute. Before creating a bug report, please check that an issue reporting the same problem does not already exist. If there is such an issue, you may add your information as a comment.</p> <p>To report a new bug you should open an issue that summarizes the bug and set the label to .</p> <p>If you want to provide a fix along with your bug report: That is great! In this case please send us a pull request as described in section Contribute code.</p>"},{"location":"contributing/#suggest-a-feature","title":"Suggest a feature","text":"<p>To request a new feature you should open an issue and summarize the desired functionality and its use case. Set the issue label to .  </p>"},{"location":"contributing/#contribute-code","title":"Contribute code","text":"<p>This is an outline of what the workflow for code contributions looks like</p> <ul> <li>Check the list of open issues. Either assign an existing issue to yourself, or  create a new one that you would like work on and discuss your ideas and use cases. </li> </ul> <p>It is always best to discuss your plans beforehand, to ensure that your contribution is in line with our goals.</p> <ul> <li>Fork the repository on GitHub</li> <li>Create a topic branch from where you want to base your work. This is usually master.</li> <li>Open a new pull request, label it  and outline what you will be contributing</li> <li>Make commits of logical units.</li> <li>Make sure you sign-off on your commits <code>git commit -s -m \"feat(xyz): added feature xyz\"</code></li> <li>Write good commit messages (see below).</li> <li>Push your changes to a topic branch in your fork of the repository.</li> <li>As you push your changes, update the pull request with new information and tasks as you complete them</li> <li>Project maintainers might comment on your work as you progress</li> <li>When you are done, remove the  label and ping the maintainers for a review</li> <li>Your pull request must receive a  from two MAINTAINERS</li> </ul> <p>Thanks for your contributions!</p>"},{"location":"contributing/#commit-messages","title":"Commit messages","text":"<p>We are using the Conventional Commits convention for our commit messages. This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages.</p> <p>When creating a pull request, its description should reference the corresponding issue id.</p>"},{"location":"contributing/#sign-your-work-developer-certificate-of-origin","title":"Sign your work / Developer certificate of origin","text":"<p>All contributions (including pull requests) must agree to the Developer Certificate of Origin (DCO) version 1.1. This is exactly the same one created and used by the Linux kernel developers and posted on http://developercertificate.org/. This is a developer's certification that he or she has the right to submit the patch for inclusion into the project. Simply submitting a contribution implies this agreement, however, please include a <code>Signed-off-by</code> tag in every patch (this tag is a conventional way to confirm that you agree to the DCO) - you can automate this with a Git hook</p> <pre><code>git commit -s -m \"feat(xyz): added feature xyz\"\n</code></pre> <p>Have fun, and happy hacking!</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>The GitOps CLI provides several commands which can be used to perform typical operations on GitOps managed infrastructure repositories. You can print a help page listing all available commands with <code>gitopscli --help</code>:</p> <pre><code>usage: gitopscli [-h]\n                 {deploy,sync-apps,add-pr-comment,create-preview,delete-preview,version}\n                 ...\n\nGitOps CLI\n\noptions:\n  -h, --help            show this help message and exit\n\ncommands:\n  {deploy,sync-apps,add-pr-comment,create-preview,delete-preview,version}\n    deploy              Trigger a new deployment by changing YAML values\n    sync-apps           Synchronize applications (= every directory) from apps\n                        config repository to apps root config\n    add-pr-comment      Create a comment on the pull request\n    create-preview      Create a preview environment\n    delete-preview      Delete a preview environment\n    version             Show the GitOps CLI version information\n</code></pre> <p>A detailed description of the individual commands including some examples can be found in the CLI Commands section.</p>"},{"location":"license/","title":"License","text":"<p>Apache-2.0</p>"},{"location":"setup/","title":"Setup","text":"<p>Currently there are two different ways to setup and use the GitOps CLI.</p>"},{"location":"setup/#docker","title":"Docker","text":"<p>The official GitOps CLI Docker image comes with all dependencies pre-installed and ready-to-use. Pull it with: <pre><code>docker pull baloise/gitopscli\n</code></pre> Start the CLI and the print the help page with: <pre><code>docker run --rm -it baloise/gitopscli --help\n</code></pre></p>"},{"location":"setup/#from-source-with-virtualenv","title":"From Source With Virtualenv","text":"<p>Use this for developement and if you want to prevent dependency clashes with other programs in a user installation.</p> <p>Clone the repository and install the GitOps CLI on your machine: <pre><code>git clone https://github.com/baloise/gitopscli.git\ncd gitopscli/\npoetry install\n</code></pre> You can now use it from the command line: <pre><code>poetry run gitopscli --help\n</code></pre> If you don't need the CLI anymore, you can uninstall it with <pre><code>poetry env remove --all\n</code></pre></p> <p>Note: if your poetry is not up to date to handle the files you can use a locally updated version. Execute the following command in your cloned gitopscli directory to use an updated poetry without changing your system installation: <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip3 install poetry # installs it in the venv\n</code></pre></p>"},{"location":"setup/#from-source-into-user-installation","title":"From Source Into User Installation","text":"<p>Clone the repository and install the GitOps CLI on your machine: <pre><code>git clone https://github.com/baloise/gitopscli.git\npip3 install gitopscli/\n</code></pre> You can now use it from the command line: <pre><code>gitopscli --help\n</code></pre> If you don't need the CLI anymore, you can uninstall it with <pre><code>pip3 uninstall gitopscli\n</code></pre></p>"},{"location":"commands/add-pr-comment/","title":"add-pr-comment","text":"<p>The <code>add-pr-comment</code> command adds a comment to a pull request. You can also reply to an existing comment by providing the <code>--parent-id</code>.</p>"},{"location":"commands/add-pr-comment/#example","title":"Example","text":"<pre><code>gitopscli add-pr-comment \\\n  --git-provider-url https://bitbucket.baloise.dev \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --organisation \"my-team\" \\\n  --repository-name \"my-app\" \\\n  --pr-id 4711 \\\n  --text \"this is a comment\" \n</code></pre>"},{"location":"commands/add-pr-comment/#usage","title":"Usage","text":"<pre><code>usage: gitopscli add-pr-comment [-h] --username USERNAME --password PASSWORD\n                                --organisation ORGANISATION --repository-name\n                                REPOSITORY_NAME [--git-provider GIT_PROVIDER]\n                                [--git-provider-url GIT_PROVIDER_URL] --pr-id\n                                PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]]\n                                --text TEXT\n\noptions:\n  -h, --help            show this help message and exit\n  --username USERNAME   Git username (alternative: GITOPSCLI_USERNAME env\n                        variable)\n  --password PASSWORD   Git password or token (alternative: GITOPSCLI_PASSWORD\n                        env variable)\n  --organisation ORGANISATION\n                        Apps Git organisation/projectKey\n  --repository-name REPOSITORY_NAME\n                        Git repository name (not the URL, e.g. my-repo)\n  --git-provider GIT_PROVIDER\n                        Git server provider\n  --git-provider-url GIT_PROVIDER_URL\n                        Git provider base API URL (e.g.\n                        https://bitbucket.example.tld)\n  --pr-id PR_ID         the id of the pull request\n  --parent-id PARENT_ID\n                        the id of the parent comment, in case of a reply\n  -v [VERBOSE], --verbose [VERBOSE]\n                        Verbose exception logging\n  --text TEXT           the text of the comment\n</code></pre>"},{"location":"commands/create-pr-preview/","title":"create-pr-preview","text":"<p>The <code>create-pr-preview</code> command can be used to create a preview environment in your deployment config repository for a pull request of your app repository. You can later easily delete this preview with the <code>delete-pr-preview</code> command.</p> <p>You need to provide some additional configuration files in your repositories for this command to work. </p>"},{"location":"commands/create-pr-preview/#configuration","title":"Configuration","text":""},{"location":"commands/create-pr-preview/#preview-templates","title":"Preview Templates","text":"<p>You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder <code>.preview-templates</code>. For example <code>.preview-templates/app-xy</code> for your app <code>app-xy</code>. The <code>create-preview</code> command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview.</p> <pre><code>deployment-config-repo/\n\u251c\u2500\u2500 .preview-templates\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 app-xy                        &lt;- Can contain any files and folders\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 values.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 some-more-config-files-or-folders\n\u251c\u2500\u2500 app-xy-production\n\u251c\u2500\u2500 app-xy-staging\n\u251c\u2500\u2500 app-xy-test\n\u2514\u2500\u2500 app-xy-my-branch-c7003101-preview  &lt;- This is how a created preview looks by default\n    \u251c\u2500\u2500 values.yaml                    &lt;- e.g. image tag and route host are replaced in this one\n \u00a0\u00a0 \u2514\u2500\u2500 some-more-config-files-or-folders\n</code></pre>"},{"location":"commands/create-pr-preview/#gitopsconfigyaml","title":".gitops.config.yaml","text":"<p>Make sure that your app repository contains a <code>.gitops.config.yaml</code> file. This file provides all information to </p> <ol> <li>find repository, branch, and folder containing the template</li> <li>templates for host and namespace name</li> <li>replace values in template files (see <code>deploy</code> command for details on the key syntax)</li> <li>find repository and branch where the preview should be created (i.e. your deployment config repository)</li> <li>message templates used to comment your pull request</li> </ol> <pre><code>apiVersion: v2\napplicationName: app-xy\n# messages:                              # optional section\n#   previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\"    # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\")\n#   previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\"    # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\")\n#   previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\"                                       # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\")\npreviewConfig:\n  host: ${PREVIEW_NAMESPACE}.example.tld\n# template:                              # optional section\n#   organisation: templates              # optional (default: target.organisation)\n#   repository: template-repo            # optional (default: target.repository)\n#   branch: master                       # optional (default: target.branch)\n#   path: custom/${APPLICATION_NAME}     # optional (default: '.preview-templates/${APPLICATION_NAME}')\n  target:\n    organisation: deployments\n    repository: deployment-config-repo\n#   branch: master                       # optional (defaults to repo's default branch)\n#   namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview'  # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview',\n                                                                #           Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be\n                                                                #           truncated if max namespace length exceeds `maxNamespaceLength` chars.)\n#   maxNamespaceLength: 63               # optional (default: 53)\n  replace:\n    Chart.yaml:\n      - path: name\n        value: ${PREVIEW_NAMESPACE}\n    values.yaml:\n      - path: app.image\n        value: registry.example.tld/my-app:${GIT_HASH}\n      - path: route.host\n        value: ${PREVIEW_HOST}\n</code></pre> <p>Info</p> <p>If you currently use the old <code>.gitops.config.yaml</code> format (v0) you may find this online converter helpful to transition to the current <code>apiVersion v2</code>.</p> <p>Warning</p> <p>The old (v0) version and <code>apiVersion v1</code> are marked deprecated and will be removed in <code>gitopscli</code> version 6.0.0.</p> <p>Equivalent example:</p> <pre><code># old 'v0' format\ndeploymentConfig:\n  org: deployments\n  repository: deployment-config-repo\n  applicationName: app-xy\npreviewConfig:\n  route:\n    host:\n      template: app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld\n  replace:\n    - path: image.tag\n      variable: GIT_COMMIT\n    - path: route.host\n      variable: ROUTE_HOST\n</code></pre> <pre><code># v2 format\napiVersion: v2\napplicationName: app-xy\npreviewConfig:\n  host: ${PREVIEW_NAMESPACE}.example.tld\n  target:\n    organisation: deployments\n    repository: deployment-config-repo\n    namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview\n  replace:\n    Chart.yaml:\n      - path: name\n        value: ${PREVIEW_NAMESPACE}\n    values.yaml:\n      - path: image.tag\n        value: ${GIT_HASH}\n      - path: route.host\n        value: ${PREVIEW_HOST}\n</code></pre>"},{"location":"commands/create-pr-preview/#variables","title":"Variables","text":"<ul> <li><code>APPLICATION_NAME</code>: value from <code>applicationName</code></li> <li><code>GIT_HASH</code>:<ul> <li><code>create-preview</code>: The CLI provided <code>--git-hash</code></li> <li><code>create-pr-preview</code>: The git hash of the app repository commit that will be deployed</li> </ul> </li> <li><code>PREVIEW_ID</code>:<ul> <li><code>create-preview</code>: The CLI provided <code>--preview-id</code></li> <li><code>create-pr-preview</code>: The branch name in the app repository</li> </ul> </li> <li><code>PREVIEW_ID_HASH</code>: The first 8 characters of the SHA256 hash of <code>PREVIEW_ID</code></li> <li><code>PREVIEW_ID_HASH_SHORT</code>: The first 3 characters of the SHA256 hash of <code>PREVIEW_ID</code></li> <li><code>PREVIEW_NAMESPACE</code>: The resulting value of <code>previewConfig.target.namespace</code></li> <li><code>PREVIEW_HOST</code>: The resulting value of <code>previewConfig.host</code></li> </ul>"},{"location":"commands/create-pr-preview/#example","title":"Example","text":"<pre><code>gitopscli create-pr-preview \\\n  --git-provider-url https://bitbucket.baloise.dev \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --git-user \"GitOps CLI\" \\\n  --git-email \"gitopscli@baloise.dev\" \\\n  --organisation \"my-team\" \\\n  --repository-name \"app-xy\" \\\n  --pr-id 4711\n</code></pre>"},{"location":"commands/create-pr-preview/#usage","title":"Usage","text":"<pre><code>usage: gitopscli create-pr-preview [-h] --username USERNAME --password\n                                   PASSWORD [--git-user GIT_USER]\n                                   [--git-email GIT_EMAIL]\n                                   [--git-author-name GIT_AUTHOR_NAME]\n                                   [--git-author-email GIT_AUTHOR_EMAIL]\n                                   --organisation ORGANISATION\n                                   --repository-name REPOSITORY_NAME\n                                   [--git-provider GIT_PROVIDER]\n                                   [--git-provider-url GIT_PROVIDER_URL]\n                                   --pr-id PR_ID [--parent-id PARENT_ID]\n                                   [-v [VERBOSE]]\n\noptions:\n  -h, --help            show this help message and exit\n  --username USERNAME   Git username (alternative: GITOPSCLI_USERNAME env\n                        variable)\n  --password PASSWORD   Git password or token (alternative: GITOPSCLI_PASSWORD\n                        env variable)\n  --git-user GIT_USER   Git Username\n  --git-email GIT_EMAIL\n                        Git User Email\n  --git-author-name GIT_AUTHOR_NAME\n                        Git Author Name\n  --git-author-email GIT_AUTHOR_EMAIL\n                        Git Author Email\n  --organisation ORGANISATION\n                        Apps Git organisation/projectKey\n  --repository-name REPOSITORY_NAME\n                        Git repository name (not the URL, e.g. my-repo)\n  --git-provider GIT_PROVIDER\n                        Git server provider\n  --git-provider-url GIT_PROVIDER_URL\n                        Git provider base API URL (e.g.\n                        https://bitbucket.example.tld)\n  --pr-id PR_ID         the id of the pull request\n  --parent-id PARENT_ID\n                        the id of the parent comment, in case of a reply\n  -v [VERBOSE], --verbose [VERBOSE]\n                        Verbose exception logging\n</code></pre>"},{"location":"commands/create-preview/","title":"create-preview","text":"<p>The <code>create-preview</code> command can be used to create a preview environment in your deployment config repository for a commit hash of your app repository. You can later easily delete this preview with the <code>delete-preview</code> command.</p> <p>You need to provide some additional configuration files in your repositories for this command to work. </p>"},{"location":"commands/create-preview/#configuration","title":"Configuration","text":""},{"location":"commands/create-preview/#preview-templates","title":"Preview Templates","text":"<p>You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder <code>.preview-templates</code>. For example <code>.preview-templates/app-xy</code> for your app <code>app-xy</code>. The <code>create-preview</code> command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview.</p> <pre><code>deployment-config-repo/\n\u251c\u2500\u2500 .preview-templates\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 app-xy                        &lt;- Can contain any files and folders\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 values.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 some-more-config-files-or-folders\n\u251c\u2500\u2500 app-xy-production\n\u251c\u2500\u2500 app-xy-staging\n\u251c\u2500\u2500 app-xy-test\n\u2514\u2500\u2500 app-xy-my-branch-c7003101-preview  &lt;- This is how a created preview looks by default\n    \u251c\u2500\u2500 values.yaml                    &lt;- e.g. image tag and route host are replaced in this one\n \u00a0\u00a0 \u2514\u2500\u2500 some-more-config-files-or-folders\n</code></pre>"},{"location":"commands/create-preview/#gitopsconfigyaml","title":".gitops.config.yaml","text":"<p>Make sure that your app repository contains a <code>.gitops.config.yaml</code> file. This file provides all information to </p> <ol> <li>find repository, branch, and folder containing the template</li> <li>templates for host and namespace name</li> <li>replace values in template files (see <code>deploy</code> command for details on the key syntax)</li> <li>find repository and branch where the preview should be created (i.e. your deployment config repository)</li> <li>message templates used to comment your pull request</li> </ol> <pre><code>apiVersion: v2\napplicationName: app-xy\n# messages:                              # optional section\n#   previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\"    # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\")\n#   previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\"    # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\")\n#   previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\"                                       # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\")\npreviewConfig:\n  host: ${PREVIEW_NAMESPACE}.example.tld\n# template:                              # optional section\n#   organisation: templates              # optional (default: target.organisation)\n#   repository: template-repo            # optional (default: target.repository)\n#   branch: master                       # optional (default: target.branch)\n#   path: custom/${APPLICATION_NAME}     # optional (default: '.preview-templates/${APPLICATION_NAME}')\n  target:\n    organisation: deployments\n    repository: deployment-config-repo\n#   branch: master                       # optional (defaults to repo's default branch)\n#   namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview'  # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview',\n                                                                #           Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be\n                                                                #           truncated if max namespace length exceeds `maxNamespaceLength` chars.)\n#   maxNamespaceLength: 63               # optional (default: 53)\n  replace:\n    Chart.yaml:\n      - path: name\n        value: ${PREVIEW_NAMESPACE}\n    values.yaml:\n      - path: app.image\n        value: registry.example.tld/my-app:${GIT_HASH}\n      - path: route.host\n        value: ${PREVIEW_HOST}\n</code></pre> <p>Info</p> <p>If you currently use the old <code>.gitops.config.yaml</code> format (v0) you may find this online converter helpful to transition to the current <code>apiVersion v2</code>.</p> <p>Warning</p> <p>The old (v0) version and <code>apiVersion v1</code> are marked deprecated and will be removed in <code>gitopscli</code> version 6.0.0.</p> <p>Equivalent example:</p> <pre><code># old 'v0' format\ndeploymentConfig:\n  org: deployments\n  repository: deployment-config-repo\n  applicationName: app-xy\npreviewConfig:\n  route:\n    host:\n      template: app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld\n  replace:\n    - path: image.tag\n      variable: GIT_COMMIT\n    - path: route.host\n      variable: ROUTE_HOST\n</code></pre> <pre><code># v2 format\napiVersion: v2\napplicationName: app-xy\npreviewConfig:\n  host: ${PREVIEW_NAMESPACE}.example.tld\n  target:\n    organisation: deployments\n    repository: deployment-config-repo\n    namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview\n  replace:\n    Chart.yaml:\n      - path: name\n        value: ${PREVIEW_NAMESPACE}\n    values.yaml:\n      - path: image.tag\n        value: ${GIT_HASH}\n      - path: route.host\n        value: ${PREVIEW_HOST}\n</code></pre>"},{"location":"commands/create-preview/#variables","title":"Variables","text":"<ul> <li><code>APPLICATION_NAME</code>: value from <code>applicationName</code></li> <li><code>GIT_HASH</code>:<ul> <li><code>create-preview</code>: The CLI provided <code>--git-hash</code></li> <li><code>create-pr-preview</code>: The git hash of the app repository commit that will be deployed</li> </ul> </li> <li><code>PREVIEW_ID</code>:<ul> <li><code>create-preview</code>: The CLI provided <code>--preview-id</code></li> <li><code>create-pr-preview</code>: The branch name in the app repository</li> </ul> </li> <li><code>PREVIEW_ID_HASH</code>: The first 8 characters of the SHA256 hash of <code>PREVIEW_ID</code></li> <li><code>PREVIEW_ID_HASH_SHORT</code>: The first 3 characters of the SHA256 hash of <code>PREVIEW_ID</code></li> <li><code>PREVIEW_NAMESPACE</code>: The resulting value of <code>previewConfig.target.namespace</code></li> <li><code>PREVIEW_HOST</code>: The resulting value of <code>previewConfig.host</code></li> </ul>"},{"location":"commands/create-preview/#returned-information","title":"Returned Information","text":"<p>After running this command you'll find a YAML file at <code>/tmp/gitopscli-preview-info.yaml</code>. It contains generated information about your preview environment:</p> <pre><code>previewId: PREVIEW_ID\npreviewIdHash: 685912d3\nrouteHost: app.xy-685912d3.example.tld\nnamespace: my-app-685912d3-preview\n</code></pre>"},{"location":"commands/create-preview/#example","title":"Example","text":"<pre><code>gitopscli create-preview \\\n  --git-provider-url https://bitbucket.baloise.dev \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --git-user \"GitOps CLI\" \\\n  --git-email \"gitopscli@baloise.dev\" \\\n  --organisation \"my-team\" \\\n  --repository-name \"app-xy\" \\\n  --git-hash \"c0784a34e834117e1489973327ff4ff3c2582b94\" \\\n  --preview-id \"test-preview-id\" \\\n</code></pre>"},{"location":"commands/create-preview/#usage","title":"Usage","text":"<pre><code>usage: gitopscli create-preview [-h] --username USERNAME --password PASSWORD\n                                [--git-user GIT_USER] [--git-email GIT_EMAIL]\n                                [--git-author-name GIT_AUTHOR_NAME]\n                                [--git-author-email GIT_AUTHOR_EMAIL]\n                                --organisation ORGANISATION --repository-name\n                                REPOSITORY_NAME [--git-provider GIT_PROVIDER]\n                                [--git-provider-url GIT_PROVIDER_URL]\n                                --git-hash GIT_HASH --preview-id PREVIEW_ID\n                                [-v [VERBOSE]]\n\noptions:\n  -h, --help            show this help message and exit\n  --username USERNAME   Git username (alternative: GITOPSCLI_USERNAME env\n                        variable)\n  --password PASSWORD   Git password or token (alternative: GITOPSCLI_PASSWORD\n                        env variable)\n  --git-user GIT_USER   Git Username\n  --git-email GIT_EMAIL\n                        Git User Email\n  --git-author-name GIT_AUTHOR_NAME\n                        Git Author Name\n  --git-author-email GIT_AUTHOR_EMAIL\n                        Git Author Email\n  --organisation ORGANISATION\n                        Apps Git organisation/projectKey\n  --repository-name REPOSITORY_NAME\n                        Git repository name (not the URL, e.g. my-repo)\n  --git-provider GIT_PROVIDER\n                        Git server provider\n  --git-provider-url GIT_PROVIDER_URL\n                        Git provider base API URL (e.g.\n                        https://bitbucket.example.tld)\n  --git-hash GIT_HASH   the git hash which should be deployed\n  --preview-id PREVIEW_ID\n                        The user-defined preview ID\n  -v [VERBOSE], --verbose [VERBOSE]\n                        Verbose exception logging\n</code></pre>"},{"location":"commands/delete-pr-preview/","title":"delete-pr-preview","text":"<p>The <code>delete-pr-preview</code> command can be used to delete a preview previously created with the <code>create-pr-preview</code> command. Please refer to <code>create-pr-preview</code> documentation for the needed configuration files.</p>"},{"location":"commands/delete-pr-preview/#example","title":"Example","text":"<pre><code>gitopscli delete-pr-preview \\\n  --git-provider-url https://bitbucket.baloise.dev \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --git-user \"GitOps CLI\" \\\n  --git-email \"gitopscli@baloise.dev\" \\\n  --organisation \"my-team\" \\\n  --repository-name \"app-xy\" \\\n  --branch \"my-pr-branch\" \\\n</code></pre>"},{"location":"commands/delete-pr-preview/#usage","title":"Usage","text":"<pre><code>usage: gitopscli delete-pr-preview [-h] --username USERNAME --password\n                                   PASSWORD [--git-user GIT_USER]\n                                   [--git-email GIT_EMAIL]\n                                   [--git-author-name GIT_AUTHOR_NAME]\n                                   [--git-author-email GIT_AUTHOR_EMAIL]\n                                   --organisation ORGANISATION\n                                   --repository-name REPOSITORY_NAME\n                                   [--git-provider GIT_PROVIDER]\n                                   [--git-provider-url GIT_PROVIDER_URL]\n                                   --branch BRANCH\n                                   [--expect-preview-exists [EXPECT_PREVIEW_EXISTS]]\n                                   [-v [VERBOSE]]\n\noptions:\n  -h, --help            show this help message and exit\n  --username USERNAME   Git username (alternative: GITOPSCLI_USERNAME env\n                        variable)\n  --password PASSWORD   Git password or token (alternative: GITOPSCLI_PASSWORD\n                        env variable)\n  --git-user GIT_USER   Git Username\n  --git-email GIT_EMAIL\n                        Git User Email\n  --git-author-name GIT_AUTHOR_NAME\n                        Git Author Name\n  --git-author-email GIT_AUTHOR_EMAIL\n                        Git Author Email\n  --organisation ORGANISATION\n                        Apps Git organisation/projectKey\n  --repository-name REPOSITORY_NAME\n                        Git repository name (not the URL, e.g. my-repo)\n  --git-provider GIT_PROVIDER\n                        Git server provider\n  --git-provider-url GIT_PROVIDER_URL\n                        Git provider base API URL (e.g.\n                        https://bitbucket.example.tld)\n  --branch BRANCH       The branch for which the preview was created for\n  --expect-preview-exists [EXPECT_PREVIEW_EXISTS]\n                        Fail if preview does not exist\n  -v [VERBOSE], --verbose [VERBOSE]\n                        Verbose exception logging\n</code></pre>"},{"location":"commands/delete-preview/","title":"delete-preview","text":"<p>The <code>delete-preview</code> command can be used to delete a preview previously created with the <code>create-preview</code> command. Please refer to <code>create-preview</code> documentation for the needed configuration files.</p>"},{"location":"commands/delete-preview/#example","title":"Example","text":"<pre><code>gitopscli delete-preview \\\n  --git-provider-url https://bitbucket.baloise.dev \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --git-user \"GitOps CLI\" \\\n  --git-email \"gitopscli@baloise.dev\" \\\n  --organisation \"my-team\" \\\n  --repository-name \"app-xy\" \\\n  --preview-id \"test123\" \\\n</code></pre>"},{"location":"commands/delete-preview/#usage","title":"Usage","text":"<pre><code>usage: gitopscli delete-preview [-h] --username USERNAME --password PASSWORD\n                                [--git-user GIT_USER] [--git-email GIT_EMAIL]\n                                [--git-author-name GIT_AUTHOR_NAME]\n                                [--git-author-email GIT_AUTHOR_EMAIL]\n                                --organisation ORGANISATION --repository-name\n                                REPOSITORY_NAME [--git-provider GIT_PROVIDER]\n                                [--git-provider-url GIT_PROVIDER_URL]\n                                --preview-id PREVIEW_ID\n                                [--expect-preview-exists [EXPECT_PREVIEW_EXISTS]]\n                                [-v [VERBOSE]]\n\noptions:\n  -h, --help            show this help message and exit\n  --username USERNAME   Git username (alternative: GITOPSCLI_USERNAME env\n                        variable)\n  --password PASSWORD   Git password or token (alternative: GITOPSCLI_PASSWORD\n                        env variable)\n  --git-user GIT_USER   Git Username\n  --git-email GIT_EMAIL\n                        Git User Email\n  --git-author-name GIT_AUTHOR_NAME\n                        Git Author Name\n  --git-author-email GIT_AUTHOR_EMAIL\n                        Git Author Email\n  --organisation ORGANISATION\n                        Apps Git organisation/projectKey\n  --repository-name REPOSITORY_NAME\n                        Git repository name (not the URL, e.g. my-repo)\n  --git-provider GIT_PROVIDER\n                        Git server provider\n  --git-provider-url GIT_PROVIDER_URL\n                        Git provider base API URL (e.g.\n                        https://bitbucket.example.tld)\n  --preview-id PREVIEW_ID\n                        The user-defined preview ID\n  --expect-preview-exists [EXPECT_PREVIEW_EXISTS]\n                        Fail if preview does not exist\n  -v [VERBOSE], --verbose [VERBOSE]\n                        Verbose exception logging\n</code></pre>"},{"location":"commands/deploy/","title":"deploy","text":"<p>The <code>deploy</code> command can be used to deploy applications by updating the image tags in the YAML files of a config repository. Of course, you can also use it to update any YAML values in a git repository. However, only one YAML can be changed at a time.</p>"},{"location":"commands/deploy/#example","title":"Example","text":"<p>Let's assume you have a repository <code>deployment/myapp-non-prod</code> which contains your deployment configuration in the form of YAML files (e.g. Helm charts). To deploy a new version of your application you need to update some values in <code>example/values.yaml</code>.</p> <pre><code># Example Helm values.yaml\nfrontend:\n  repository: my-app/frontend\n  tag: 1.0.0 # &lt;- you want to change this value\nbackend:\n  repository: my-app/backend\n  tag: 1.0.0 # &lt;- and this one\n  env:\n  - name: TEST\n    value: foo # &lt;- and this one in a list, selected via sibling value 'TEST'\n</code></pre> <p>With the following command GitOps CLI will update all values on the default branch.</p> <pre><code>gitopscli deploy \\\n  --git-provider-url https://bitbucket.baloise.dev \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --git-user \"GitOps CLI\" \\\n  --git-email \"gitopscli@baloise.dev\" \\\n  --organisation \"deployment\" \\\n  --repository-name \"myapp-non-prod\" \\\n  --file \"example/values.yaml\" \\\n  --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\"\n</code></pre> <p>You could also use the list index to replace the latter (<code>my-app.env.[0].value</code>). For more details on the underlying JSONPath syntax, please refer to the documenatation of the used library jsonpath-ng.</p>"},{"location":"commands/deploy/#number-of-commits","title":"Number Of Commits","text":"<p>Note that by default GitOps CLI will create a separate commit for every value change:</p> <pre><code>commit 0dcaa136b4c5249576bb1f40b942bff6ac718144\nAuthor: GitOpsCLI &lt;gitopscli@baloise.dev&gt;\nDate:   Thu Mar 12 15:30:32 2020 +0100\n\n    changed 'backend.env[?name=='TEST'].value' to 'bar' in example/values.yaml\n\ncommit d98913ad8fecf571d5f8c3635f8070b05c43a9ca\nAuthor: GitOpsCLI &lt;gitopscli@baloise.dev&gt;\nDate:   Thu Mar 12 15:30:32 2020 +0100\n\n    changed 'backend.tag' to '1.1.0' in example/values.yaml\n\ncommit 649bc72fe798891244c11809afc9fae83309772a\nAuthor: GitOpsCLI &lt;gitopscli@baloise.dev&gt;\nDate:   Thu Mar 12 15:30:32 2020 +0100\n\n    changed 'frontend.tag' to '1.1.0' in example/values.yaml\n</code></pre> <p>If you prefer to create a single commit for all changes add <code>--single-commit</code> to the command:</p> <pre><code>commit 3b96839e90c35b8decf89f34a65ab6d66c8bab28\nAuthor: GitOpsCLI &lt;gitopscli@baloise.dev&gt;\nDate:   Thu Mar 12 15:30:00 2020 +0100\n\n    updated 3 values in example/values.yaml\n\n    frontend.tag: '1.1.0'\n    backend.tag: '1.1.0'\n    'backend.env[?name==''TEST''].value': 'bar'\n</code></pre>"},{"location":"commands/deploy/#specific-commit-message","title":"Specific Commit Message","text":"<p>If you want to specify the commit message of the deployment then you can use the following param:</p> <p><code>--commit-message</code></p> <pre><code>gitopscli deploy \\\n  --git-provider-url https://bitbucket.baloise.dev \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --git-user \"GitOps CLI\" \\\n  --git-email \"gitopscli@baloise.dev\" \\\n  --organisation \"deployment\" \\\n  --repository-name \"myapp-non-prod\" \\\n  --commit-message \"test commit message\" \\\n  --file \"example/values.yaml\" \\\n  --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\"\n</code></pre> <p>This will end up in one single commit with your specified commit-message.</p>"},{"location":"commands/deploy/#create-pull-request","title":"Create Pull Request","text":"<p>In some cases you might want to create a pull request for your updates. You can achieve this by adding <code>--create-pr</code> to the command. The pull request can be left open or merged directly with <code>--auto-merge</code>.</p> <pre><code>gitopscli deploy \\\n  --git-provider-url https://bitbucket.baloise.dev \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --git-user \"GitOps CLI\" \\\n  --git-email \"gitopscli@baloise.dev\" \\\n  --organisation \"deployment\" \\\n  --repository-name \"myapp-non-prod\" \\\n  --file \"example/values.yaml\" \\\n  --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\" \\\n  --create-pr \\\n  --auto-merge\n</code></pre> <p> </p>"},{"location":"commands/deploy/#usage","title":"Usage","text":"<pre><code>usage: gitopscli deploy [-h] --file FILE --values VALUES\n                        [--single-commit [SINGLE_COMMIT]]\n                        [--commit-message COMMIT_MESSAGE] --username USERNAME\n                        --password PASSWORD [--git-user GIT_USER]\n                        [--git-email GIT_EMAIL]\n                        [--git-author-name GIT_AUTHOR_NAME]\n                        [--git-author-email GIT_AUTHOR_EMAIL]\n                        --organisation ORGANISATION --repository-name\n                        REPOSITORY_NAME [--git-provider GIT_PROVIDER]\n                        [--git-provider-url GIT_PROVIDER_URL]\n                        [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]]\n                        [--merge-method MERGE_METHOD] [--json [JSON]]\n                        [--pr-labels PR_LABELS]\n                        [--merge-parameters MERGE_PARAMETERS] [-v [VERBOSE]]\n\noptions:\n  -h, --help            show this help message and exit\n  --file FILE           YAML file path\n  --values VALUES       YAML/JSON object with the YAML path as key and the\n                        desired value as value\n  --single-commit [SINGLE_COMMIT]\n                        Create only single commit for all updates\n  --commit-message COMMIT_MESSAGE\n                        Specify exact commit message of deployment commit\n  --username USERNAME   Git username (alternative: GITOPSCLI_USERNAME env\n                        variable)\n  --password PASSWORD   Git password or token (alternative: GITOPSCLI_PASSWORD\n                        env variable)\n  --git-user GIT_USER   Git Username\n  --git-email GIT_EMAIL\n                        Git User Email\n  --git-author-name GIT_AUTHOR_NAME\n                        Git Author Name\n  --git-author-email GIT_AUTHOR_EMAIL\n                        Git Author Email\n  --organisation ORGANISATION\n                        Apps Git organisation/projectKey\n  --repository-name REPOSITORY_NAME\n                        Git repository name (not the URL, e.g. my-repo)\n  --git-provider GIT_PROVIDER\n                        Git server provider\n  --git-provider-url GIT_PROVIDER_URL\n                        Git provider base API URL (e.g. https://bitbucket.example.tld)\n  --create-pr [CREATE_PR]\n                        Creates a Pull Request\n  --auto-merge [AUTO_MERGE]\n                        Automatically merge the created PR (only valid with --create-pr)\n  --merge-method MERGE_METHOD\n                        Merge Method (e.g., 'squash', 'rebase', 'merge') (default: merge)\n  --json [JSON]         Print a JSON object containing deployment information\n  --pr-labels PR_LABELS\n                        JSON array pr labels (Gitlab, Github supported)\n  --merge-parameters MERGE_PARAMETERS\n                        JSON object pr parameters (only Gitlab supported)\n  -v [VERBOSE], --verbose [VERBOSE]\n                        Verbose exception logging\n</code></pre>"},{"location":"commands/sync-apps/","title":"sync-apps","text":"<p>The <code>sync-apps</code> command can be used to keep a root config repository in sync with several app config repositories. You can use this command if your config repositories are structured in the following (opinionated) way:</p>"},{"location":"commands/sync-apps/#repository-structure","title":"Repository Structure","text":""},{"location":"commands/sync-apps/#app-config-repositories","title":"App Config Repositories","text":"<p>You have <code>1..n</code> config repositories for the deployment configurations of your applications (e.g. one per team). Every app config repository can contain <code>0..n</code> directories (e.g. containing Helm charts). Directories starting with a dot will be ignored. Example:</p> <pre><code>team-1-app-config-repo/\n\u251c\u2500\u2500 .this-will-be-ignored\n\u251c\u2500\u2500 app-xy-production\n\u251c\u2500\u2500 app-xy-staging\n\u2514\u2500\u2500 app-xy-test\n</code></pre>"},{"location":"commands/sync-apps/#root-config-repository","title":"Root Config Repository","text":"<p>The root config repository acts as a single entrypoint for your GitOps continous delivery tool (e.g. Argo CD). Here you define all applications in your cluster and link to the app config repositories with their deployment configurations. It is structured in the following way:</p> <pre><code>root-config-repo/\n\u251c\u2500\u2500 apps\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 team-a.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 team-b.yaml\n\u2514\u2500\u2500 bootstrap\n    \u2514\u2500\u2500 values.yaml\n</code></pre>"},{"location":"commands/sync-apps/#app-specific-values","title":"app specific values","text":"<p>app specific values may be set using a .config.yaml file directly in the app directory. gitopscli will process these values and add them under customAppConfig parameter of application tenantrepo.git/app1/app_value_file.yaml <pre><code>customvalue: test\n</code></pre> rootrepo.git/apps/tenantrepo.yaml <pre><code>config:\n  repository: https://tenantrepo.git\n  applications:\n    app1:\n      customAppConfig:\n        customvalue: test\n    app2: {}\n</code></pre></p> <p>bootstrap/values.yaml <pre><code>bootstrap:\n  - name: team-a # &lt;- every entry links to a YAML file in the `apps/` directory\n  - name: team-b\n</code></pre> Alternative, when using a Chart as dependency with an alias 'config': <pre><code>config:\n  bootstrap:\n   - name: team-a # &lt;- every entry links to a YAML file in the `apps/` directory\n   - name: team-b\n</code></pre></p> <p>apps/team-a.yaml <pre><code>repository: https://github.com/company-deployments/team-1-app-config-repo.git # link to your apps root repository\n\n# The applications that are synced by the `sync-app` command:\napplications:\n  app-xy-production: # &lt;- every entry corresponds to a directory in the apps root repository\n  app-xy-staging:\n  app-xy-test:\n</code></pre> or</p> <pre><code>config:\n  repository: https://github.com/company-deployments/team-1-app-config-repo.git # link to your apps root repository\n\n# The applications that are synced by the `sync-app` command:\n  applications:\n   app-xy-production: # &lt;- every entry corresponds to a directory in the apps root repository\n   app-xy-staging:\n   app-xy-test:\n</code></pre>"},{"location":"commands/sync-apps/#example","title":"Example","text":"<pre><code>gitopscli sync-apps \\\n  --git-provider-url github \\\n  --username $GIT_USERNAME \\\n  --password $GIT_PASSWORD \\\n  --git-user \"GitOps CLI\" \\\n  --git-email \"gitopscli@baloise.dev\" \\\n  --organisation \"company-deployments\" \\\n  --repository-name \"team-1-app-config-repo\" \\\n  --root-organisation \"company-deployments\" \\\n  --root-repository-name \"root-config-repo\"\n</code></pre>"},{"location":"commands/sync-apps/#usage","title":"Usage","text":"<pre><code>usage: gitopscli sync-apps [-h] --username USERNAME --password PASSWORD\n                           [--git-user GIT_USER] [--git-email GIT_EMAIL]\n                           [--git-author-name GIT_AUTHOR_NAME]\n                           [--git-author-email GIT_AUTHOR_EMAIL]\n                           --organisation ORGANISATION --repository-name\n                           REPOSITORY_NAME [--git-provider GIT_PROVIDER]\n                           [--git-provider-url GIT_PROVIDER_URL]\n                           [-v [VERBOSE]] --root-organisation\n                           ROOT_ORGANISATION --root-repository-name\n                           ROOT_REPOSITORY_NAME\n\noptions:\n  -h, --help            show this help message and exit\n  --username USERNAME   Git username (alternative: GITOPSCLI_USERNAME env\n                        variable)\n  --password PASSWORD   Git password or token (alternative: GITOPSCLI_PASSWORD\n                        env variable)\n  --git-user GIT_USER   Git Username\n  --git-email GIT_EMAIL\n                        Git User Email\n  --git-author-name GIT_AUTHOR_NAME\n                        Git Author Name\n  --git-author-email GIT_AUTHOR_EMAIL\n                        Git Author Email\n  --organisation ORGANISATION\n                        Apps Git organisation/projectKey\n  --repository-name REPOSITORY_NAME\n                        Git repository name (not the URL, e.g. my-repo)\n  --git-provider GIT_PROVIDER\n                        Git server provider\n  --git-provider-url GIT_PROVIDER_URL\n                        Git provider base API URL (e.g.\n                        https://bitbucket.example.tld)\n  -v [VERBOSE], --verbose [VERBOSE]\n                        Verbose exception logging\n  --root-organisation ROOT_ORGANISATION\n                        Root config repository organisation\n  --root-repository-name ROOT_REPOSITORY_NAME\n                        Root config repository name\n</code></pre>"},{"location":"commands/version/","title":"version","text":"<p>The <code>version</code> command shows the GitOps CLI version information.</p>"},{"location":"commands/version/#example","title":"Example","text":"<pre><code>gitopscli version\n</code></pre>"},{"location":"commands/version/#usage","title":"Usage","text":"<pre><code>usage: gitopscli version [-h]\n\noptions:\n  -h, --help  show this help message and exit\n</code></pre>"},{"location":"includes/preview-configuration/","title":"Preview configuration","text":""},{"location":"includes/preview-configuration/#configuration","title":"Configuration","text":""},{"location":"includes/preview-configuration/#preview-templates","title":"Preview Templates","text":"<p>You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder <code>.preview-templates</code>. For example <code>.preview-templates/app-xy</code> for your app <code>app-xy</code>. The <code>create-preview</code> command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview.</p> <pre><code>deployment-config-repo/\n\u251c\u2500\u2500 .preview-templates\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 app-xy                        &lt;- Can contain any files and folders\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 values.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 some-more-config-files-or-folders\n\u251c\u2500\u2500 app-xy-production\n\u251c\u2500\u2500 app-xy-staging\n\u251c\u2500\u2500 app-xy-test\n\u2514\u2500\u2500 app-xy-my-branch-c7003101-preview  &lt;- This is how a created preview looks by default\n    \u251c\u2500\u2500 values.yaml                    &lt;- e.g. image tag and route host are replaced in this one\n \u00a0\u00a0 \u2514\u2500\u2500 some-more-config-files-or-folders\n</code></pre>"},{"location":"includes/preview-configuration/#gitopsconfigyaml","title":".gitops.config.yaml","text":"<p>Make sure that your app repository contains a <code>.gitops.config.yaml</code> file. This file provides all information to </p> <ol> <li>find repository, branch, and folder containing the template</li> <li>templates for host and namespace name</li> <li>replace values in template files (see <code>deploy</code> command for details on the key syntax)</li> <li>find repository and branch where the preview should be created (i.e. your deployment config repository)</li> <li>message templates used to comment your pull request</li> </ol> <pre><code>apiVersion: v2\napplicationName: app-xy\n# messages:                              # optional section\n#   previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\"    # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\")\n#   previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\"    # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\")\n#   previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\"                                       # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\")\npreviewConfig:\n  host: ${PREVIEW_NAMESPACE}.example.tld\n# template:                              # optional section\n#   organisation: templates              # optional (default: target.organisation)\n#   repository: template-repo            # optional (default: target.repository)\n#   branch: master                       # optional (default: target.branch)\n#   path: custom/${APPLICATION_NAME}     # optional (default: '.preview-templates/${APPLICATION_NAME}')\n  target:\n    organisation: deployments\n    repository: deployment-config-repo\n#   branch: master                       # optional (defaults to repo's default branch)\n#   namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview'  # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview',\n                                                                #           Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be\n                                                                #           truncated if max namespace length exceeds `maxNamespaceLength` chars.)\n#   maxNamespaceLength: 63               # optional (default: 53)\n  replace:\n    Chart.yaml:\n      - path: name\n        value: ${PREVIEW_NAMESPACE}\n    values.yaml:\n      - path: app.image\n        value: registry.example.tld/my-app:${GIT_HASH}\n      - path: route.host\n        value: ${PREVIEW_HOST}\n</code></pre> <p>Info</p> <p>If you currently use the old <code>.gitops.config.yaml</code> format (v0) you may find this online converter helpful to transition to the current <code>apiVersion v2</code>.</p> <p>Warning</p> <p>The old (v0) version and <code>apiVersion v1</code> are marked deprecated and will be removed in <code>gitopscli</code> version 6.0.0.</p> <p>Equivalent example:</p> <pre><code># old 'v0' format\ndeploymentConfig:\n  org: deployments\n  repository: deployment-config-repo\n  applicationName: app-xy\npreviewConfig:\n  route:\n    host:\n      template: app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld\n  replace:\n    - path: image.tag\n      variable: GIT_COMMIT\n    - path: route.host\n      variable: ROUTE_HOST\n</code></pre> <pre><code># v2 format\napiVersion: v2\napplicationName: app-xy\npreviewConfig:\n  host: ${PREVIEW_NAMESPACE}.example.tld\n  target:\n    organisation: deployments\n    repository: deployment-config-repo\n    namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview\n  replace:\n    Chart.yaml:\n      - path: name\n        value: ${PREVIEW_NAMESPACE}\n    values.yaml:\n      - path: image.tag\n        value: ${GIT_HASH}\n      - path: route.host\n        value: ${PREVIEW_HOST}\n</code></pre>"},{"location":"includes/preview-configuration/#variables","title":"Variables","text":"<ul> <li><code>APPLICATION_NAME</code>: value from <code>applicationName</code></li> <li><code>GIT_HASH</code>:<ul> <li><code>create-preview</code>: The CLI provided <code>--git-hash</code></li> <li><code>create-pr-preview</code>: The git hash of the app repository commit that will be deployed</li> </ul> </li> <li><code>PREVIEW_ID</code>:<ul> <li><code>create-preview</code>: The CLI provided <code>--preview-id</code></li> <li><code>create-pr-preview</code>: The branch name in the app repository</li> </ul> </li> <li><code>PREVIEW_ID_HASH</code>: The first 8 characters of the SHA256 hash of <code>PREVIEW_ID</code></li> <li><code>PREVIEW_ID_HASH_SHORT</code>: The first 3 characters of the SHA256 hash of <code>PREVIEW_ID</code></li> <li><code>PREVIEW_NAMESPACE</code>: The resulting value of <code>previewConfig.target.namespace</code></li> <li><code>PREVIEW_HOST</code>: The resulting value of <code>previewConfig.host</code></li> </ul>"}]}