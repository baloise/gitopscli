{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GitOps CLI \u00b6 A command line interface to perform operations on GitOps managed infrastructure repositories. Features \u00b6 Update YAML values in config repository to e.g. deploy an application Add pull request comments Create and delete preview environments in the config repository for a pull request in an app repository Update root config repository with all apps from child config repositories","title":"Home"},{"location":"#gitops-cli","text":"A command line interface to perform operations on GitOps managed infrastructure repositories.","title":"GitOps CLI"},{"location":"#features","text":"Update YAML values in config repository to e.g. deploy an application Add pull request comments Create and delete preview environments in the config repository for a pull request in an app repository Update root config repository with all apps from child config repositories","title":"Features"},{"location":"changelog/","text":"Changelog \u00b6 This project adheres to Semantic Versioning . You can find the changelog in the Github releases .","title":"Changelog"},{"location":"changelog/#changelog","text":"This project adheres to Semantic Versioning . You can find the changelog in the Github releases .","title":"Changelog"},{"location":"contributing/","text":"Contributing \u00b6 Thank you for your interest in GitOps CLI . Your contributions are highly welcome. There are multiple ways of getting involved: Report a bug Suggest a feature Contribute code Below are a few guidelines we would like you to follow. If you need help, please reach out to us by opening an issue. Report a bug \u00b6 Reporting bugs is one of the best ways to contribute. Before creating a bug report, please check that an issue reporting the same problem does not already exist. If there is such an issue, you may add your information as a comment. To report a new bug you should open an issue that summarizes the bug and set the label to . If you want to provide a fix along with your bug report: That is great! In this case please send us a pull request as described in section Contribute code . Suggest a feature \u00b6 To request a new feature you should open an issue and summarize the desired functionality and its use case. Set the issue label to . Contribute code \u00b6 This is an outline of what the workflow for code contributions looks like Check the list of open issues . Either assign an existing issue to yourself, or create a new one that you would like work on and discuss your ideas and use cases. It is always best to discuss your plans beforehand, to ensure that your contribution is in line with our goals. Fork the repository on GitHub Create a topic branch from where you want to base your work. This is usually master. Open a new pull request, label it and outline what you will be contributing Make commits of logical units. Make sure you sign-off on your commits git commit -s -m \"feat(xyz): added feature xyz\" Write good commit messages (see below). Push your changes to a topic branch in your fork of the repository. As you push your changes, update the pull request with new information and tasks as you complete them Project maintainers might comment on your work as you progress When you are done, remove the label and ping the maintainers for a review Your pull request must receive a from two MAINTAINERS Thanks for your contributions! Commit messages \u00b6 We are using the Conventional Commits convention for our commit messages. This convention dovetails with SemVer , by describing the features, fixes, and breaking changes made in commit messages. When creating a pull request, its description should reference the corresponding issue id. Sign your work / Developer certificate of origin \u00b6 All contributions (including pull requests) must agree to the Developer Certificate of Origin (DCO) version 1.1. This is exactly the same one created and used by the Linux kernel developers and posted on http://developercertificate.org/ . This is a developer's certification that he or she has the right to submit the patch for inclusion into the project. Simply submitting a contribution implies this agreement, however, please include a Signed-off-by tag in every patch (this tag is a conventional way to confirm that you agree to the DCO) - you can automate this with a Git hook git commit -s -m \"feat(xyz): added feature xyz\" Have fun, and happy hacking!","title":"Contributing"},{"location":"contributing/#contributing","text":"Thank you for your interest in GitOps CLI . Your contributions are highly welcome. There are multiple ways of getting involved: Report a bug Suggest a feature Contribute code Below are a few guidelines we would like you to follow. If you need help, please reach out to us by opening an issue.","title":"Contributing"},{"location":"contributing/#report-a-bug","text":"Reporting bugs is one of the best ways to contribute. Before creating a bug report, please check that an issue reporting the same problem does not already exist. If there is such an issue, you may add your information as a comment. To report a new bug you should open an issue that summarizes the bug and set the label to . If you want to provide a fix along with your bug report: That is great! In this case please send us a pull request as described in section Contribute code .","title":"Report a bug"},{"location":"contributing/#suggest-a-feature","text":"To request a new feature you should open an issue and summarize the desired functionality and its use case. Set the issue label to .","title":"Suggest a feature"},{"location":"contributing/#contribute-code","text":"This is an outline of what the workflow for code contributions looks like Check the list of open issues . Either assign an existing issue to yourself, or create a new one that you would like work on and discuss your ideas and use cases. It is always best to discuss your plans beforehand, to ensure that your contribution is in line with our goals. Fork the repository on GitHub Create a topic branch from where you want to base your work. This is usually master. Open a new pull request, label it and outline what you will be contributing Make commits of logical units. Make sure you sign-off on your commits git commit -s -m \"feat(xyz): added feature xyz\" Write good commit messages (see below). Push your changes to a topic branch in your fork of the repository. As you push your changes, update the pull request with new information and tasks as you complete them Project maintainers might comment on your work as you progress When you are done, remove the label and ping the maintainers for a review Your pull request must receive a from two MAINTAINERS Thanks for your contributions!","title":"Contribute code"},{"location":"contributing/#commit-messages","text":"We are using the Conventional Commits convention for our commit messages. This convention dovetails with SemVer , by describing the features, fixes, and breaking changes made in commit messages. When creating a pull request, its description should reference the corresponding issue id.","title":"Commit messages"},{"location":"contributing/#sign-your-work-developer-certificate-of-origin","text":"All contributions (including pull requests) must agree to the Developer Certificate of Origin (DCO) version 1.1. This is exactly the same one created and used by the Linux kernel developers and posted on http://developercertificate.org/ . This is a developer's certification that he or she has the right to submit the patch for inclusion into the project. Simply submitting a contribution implies this agreement, however, please include a Signed-off-by tag in every patch (this tag is a conventional way to confirm that you agree to the DCO) - you can automate this with a Git hook git commit -s -m \"feat(xyz): added feature xyz\" Have fun, and happy hacking!","title":"Sign your work / Developer certificate of origin"},{"location":"getting-started/","text":"Getting started \u00b6 The GitOps CLI provides several commands which can be used to perform typical operations on GitOps managed infrastructure repositories. You can print a help page listing all available commands with gitopscli --help : usage: gitopscli [-h] {deploy,sync-apps,add-pr-comment,create-preview,delete-preview,version} ... GitOps CLI options: -h, --help show this help message and exit commands: {deploy,sync-apps,add-pr-comment,create-preview,delete-preview,version} deploy Trigger a new deployment by changing YAML values sync-apps Synchronize applications (= every directory) from apps config repository to apps root config add-pr-comment Create a comment on the pull request create-preview Create a preview environment delete-preview Delete a preview environment version Show the GitOps CLI version information A detailed description of the individual commands including some examples can be found in the CLI Commands section.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"The GitOps CLI provides several commands which can be used to perform typical operations on GitOps managed infrastructure repositories. You can print a help page listing all available commands with gitopscli --help : usage: gitopscli [-h] {deploy,sync-apps,add-pr-comment,create-preview,delete-preview,version} ... GitOps CLI options: -h, --help show this help message and exit commands: {deploy,sync-apps,add-pr-comment,create-preview,delete-preview,version} deploy Trigger a new deployment by changing YAML values sync-apps Synchronize applications (= every directory) from apps config repository to apps root config add-pr-comment Create a comment on the pull request create-preview Create a preview environment delete-preview Delete a preview environment version Show the GitOps CLI version information A detailed description of the individual commands including some examples can be found in the CLI Commands section.","title":"Getting started"},{"location":"license/","text":"License \u00b6 Apache-2.0","title":"License"},{"location":"license/#license","text":"Apache-2.0","title":"License"},{"location":"setup/","text":"Setup \u00b6 Currently there are two different ways to setup and use the GitOps CLI. Docker \u00b6 The official GitOps CLI Docker image comes with all dependencies pre-installed and ready-to-use. Pull it with: docker pull baloise/gitopscli Start the CLI and the print the help page with: docker run --rm -it baloise/gitopscli --help From Source \u00b6 Clone the repository and install the GitOps CLI on your machine: git clone https://github.com/baloise/gitopscli.git pip3 install gitopscli/ You can now use it from the command line: gitopscli --help If you don't need the CLI anymore, you can uninstall it with pip3 uninstall gitopscli","title":"Setup"},{"location":"setup/#setup","text":"Currently there are two different ways to setup and use the GitOps CLI.","title":"Setup"},{"location":"setup/#docker","text":"The official GitOps CLI Docker image comes with all dependencies pre-installed and ready-to-use. Pull it with: docker pull baloise/gitopscli Start the CLI and the print the help page with: docker run --rm -it baloise/gitopscli --help","title":"Docker"},{"location":"setup/#from-source","text":"Clone the repository and install the GitOps CLI on your machine: git clone https://github.com/baloise/gitopscli.git pip3 install gitopscli/ You can now use it from the command line: gitopscli --help If you don't need the CLI anymore, you can uninstall it with pip3 uninstall gitopscli","title":"From Source"},{"location":"commands/add-pr-comment/","text":"add-pr-comment \u00b6 The add-pr-comment command adds a comment to a pull request. You can also reply to an existing comment by providing the --parent-id . Example \u00b6 gitopscli add-pr-comment \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --pr-id 4711 \\ --text \"this is a comment\" Usage \u00b6 usage: gitopscli add-pr-comment [-h] --username USERNAME --password PASSWORD --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --pr-id PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]] --text TEXT options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --pr-id PR_ID the id of the pull request --parent-id PARENT_ID the id of the parent comment, in case of a reply -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging --text TEXT the text of the comment","title":"add-pr-comment"},{"location":"commands/add-pr-comment/#add-pr-comment","text":"The add-pr-comment command adds a comment to a pull request. You can also reply to an existing comment by providing the --parent-id .","title":"add-pr-comment"},{"location":"commands/add-pr-comment/#example","text":"gitopscli add-pr-comment \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --pr-id 4711 \\ --text \"this is a comment\"","title":"Example"},{"location":"commands/add-pr-comment/#usage","text":"usage: gitopscli add-pr-comment [-h] --username USERNAME --password PASSWORD --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --pr-id PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]] --text TEXT options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --pr-id PR_ID the id of the pull request --parent-id PARENT_ID the id of the parent comment, in case of a reply -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging --text TEXT the text of the comment","title":"Usage"},{"location":"commands/create-pr-preview/","text":"create-pr-preview \u00b6 The create-pr-preview command can be used to create a preview environment in your deployment config repository for a pull request of your app repository . You can later easily delete this preview with the delete-pr-preview command . You need to provide some additional configuration files in your repositories for this command to work. Configuration \u00b6 Preview Templates \u00b6 You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder .preview-templates . For example .preview-templates/app-xy for your app app-xy . The create-preview command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview. deployment-config-repo/ \u251c\u2500\u2500 .preview-templates \u2502 \u2514\u2500\u2500 app-xy <- Can contain any files and folders \u2502 \u251c\u2500\u2500 values.yaml \u2502 \u2514\u2500\u2500 some-more-config-files-or-folders \u251c\u2500\u2500 app-xy-production \u251c\u2500\u2500 app-xy-staging \u251c\u2500\u2500 app-xy-test \u2514\u2500\u2500 app-xy-my-branch-c7003101-preview <- This is how a created preview looks by default \u251c\u2500\u2500 values.yaml <- e.g. image tag and route host are replaced in this one \u2514\u2500\u2500 some-more-config-files-or-folders .gitops.config.yaml \u00b6 Make sure that your app repository contains a .gitops.config.yaml file. This file provides all information to find repository, branch, and folder containing the template templates for host and namespace name replace values in template files (see deploy command for details on the key syntax) find repository and branch where the preview should be created (i.e. your deployment config repository ) message templates used to comment your pull request apiVersion : v2 applicationName : app-xy # messages: # optional section # previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\" # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\") previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld # template: # optional section # organisation: templates # optional (default: target.organisation) # repository: template-repo # optional (default: target.repository) # branch: master # optional (default: target.branch) # path: custom/${APPLICATION_NAME} # optional (default: '.preview-templates/${APPLICATION_NAME}') target : organisation : deployments repository : deployment-config-repo # branch: master # optional (defaults to repo's default branch) # namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview' # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview', # Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be # truncated if max namespace length exceeds `maxNamespaceLength` chars.) # maxNamespaceLength: 63 # optional (default: 53) replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : app.image value : registry.example.tld/my-app:${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Info If you currently use the old .gitops.config.yaml format ( v0 ) you may find this online converter helpful to transition to the current apiVersion v2 . Warning The old ( v0 ) version and apiVersion v1 are marked deprecated and will be removed in gitopscli version 6.0.0. Equivalent example: # old 'v0' format deploymentConfig : org : deployments repository : deployment-config-repo applicationName : app-xy previewConfig : route : host : template : app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : - path : image.tag variable : GIT_COMMIT - path : route.host variable : ROUTE_HOST # v2 format apiVersion : v2 applicationName : app-xy previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld target : organisation : deployments repository : deployment-config-repo namespace : ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : image.tag value : ${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Variables \u00b6 APPLICATION_NAME : value from applicationName GIT_HASH : create-preview : The CLI provided --git-hash create-pr-preview : The git hash of the app repository commit that will be deployed PREVIEW_ID : create-preview : The CLI provided --preview-id create-pr-preview : The branch name in the app repository PREVIEW_ID_HASH : The first 8 characters of the SHA256 hash of PREVIEW_ID PREVIEW_ID_HASH_SHORT : The first 3 characters of the SHA256 hash of PREVIEW_ID PREVIEW_NAMESPACE : The resulting value of previewConfig.target.namespace PREVIEW_HOST : The resulting value of previewConfig.host Example \u00b6 gitopscli create-pr-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"app-xy\" \\ --pr-id 4711 Usage \u00b6 usage: gitopscli create-pr-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --pr-id PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]] options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --pr-id PR_ID the id of the pull request --parent-id PARENT_ID the id of the parent comment, in case of a reply -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"create-pr-preview"},{"location":"commands/create-pr-preview/#create-pr-preview","text":"The create-pr-preview command can be used to create a preview environment in your deployment config repository for a pull request of your app repository . You can later easily delete this preview with the delete-pr-preview command . You need to provide some additional configuration files in your repositories for this command to work.","title":"create-pr-preview"},{"location":"commands/create-pr-preview/#configuration","text":"","title":"Configuration"},{"location":"commands/create-pr-preview/#preview-templates","text":"You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder .preview-templates . For example .preview-templates/app-xy for your app app-xy . The create-preview command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview. deployment-config-repo/ \u251c\u2500\u2500 .preview-templates \u2502 \u2514\u2500\u2500 app-xy <- Can contain any files and folders \u2502 \u251c\u2500\u2500 values.yaml \u2502 \u2514\u2500\u2500 some-more-config-files-or-folders \u251c\u2500\u2500 app-xy-production \u251c\u2500\u2500 app-xy-staging \u251c\u2500\u2500 app-xy-test \u2514\u2500\u2500 app-xy-my-branch-c7003101-preview <- This is how a created preview looks by default \u251c\u2500\u2500 values.yaml <- e.g. image tag and route host are replaced in this one \u2514\u2500\u2500 some-more-config-files-or-folders","title":"Preview Templates"},{"location":"commands/create-pr-preview/#gitopsconfigyaml","text":"Make sure that your app repository contains a .gitops.config.yaml file. This file provides all information to find repository, branch, and folder containing the template templates for host and namespace name replace values in template files (see deploy command for details on the key syntax) find repository and branch where the preview should be created (i.e. your deployment config repository ) message templates used to comment your pull request apiVersion : v2 applicationName : app-xy # messages: # optional section # previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\" # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\") previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld # template: # optional section # organisation: templates # optional (default: target.organisation) # repository: template-repo # optional (default: target.repository) # branch: master # optional (default: target.branch) # path: custom/${APPLICATION_NAME} # optional (default: '.preview-templates/${APPLICATION_NAME}') target : organisation : deployments repository : deployment-config-repo # branch: master # optional (defaults to repo's default branch) # namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview' # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview', # Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be # truncated if max namespace length exceeds `maxNamespaceLength` chars.) # maxNamespaceLength: 63 # optional (default: 53) replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : app.image value : registry.example.tld/my-app:${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Info If you currently use the old .gitops.config.yaml format ( v0 ) you may find this online converter helpful to transition to the current apiVersion v2 . Warning The old ( v0 ) version and apiVersion v1 are marked deprecated and will be removed in gitopscli version 6.0.0. Equivalent example: # old 'v0' format deploymentConfig : org : deployments repository : deployment-config-repo applicationName : app-xy previewConfig : route : host : template : app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : - path : image.tag variable : GIT_COMMIT - path : route.host variable : ROUTE_HOST # v2 format apiVersion : v2 applicationName : app-xy previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld target : organisation : deployments repository : deployment-config-repo namespace : ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : image.tag value : ${GIT_HASH} - path : route.host value : ${PREVIEW_HOST}","title":".gitops.config.yaml"},{"location":"commands/create-pr-preview/#variables","text":"APPLICATION_NAME : value from applicationName GIT_HASH : create-preview : The CLI provided --git-hash create-pr-preview : The git hash of the app repository commit that will be deployed PREVIEW_ID : create-preview : The CLI provided --preview-id create-pr-preview : The branch name in the app repository PREVIEW_ID_HASH : The first 8 characters of the SHA256 hash of PREVIEW_ID PREVIEW_ID_HASH_SHORT : The first 3 characters of the SHA256 hash of PREVIEW_ID PREVIEW_NAMESPACE : The resulting value of previewConfig.target.namespace PREVIEW_HOST : The resulting value of previewConfig.host","title":"Variables"},{"location":"commands/create-pr-preview/#example","text":"gitopscli create-pr-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"app-xy\" \\ --pr-id 4711","title":"Example"},{"location":"commands/create-pr-preview/#usage","text":"usage: gitopscli create-pr-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --pr-id PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]] options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --pr-id PR_ID the id of the pull request --parent-id PARENT_ID the id of the parent comment, in case of a reply -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"Usage"},{"location":"commands/create-preview/","text":"create-preview \u00b6 The create-preview command can be used to create a preview environment in your deployment config repository for a commit hash of your app repository . You can later easily delete this preview with the delete-preview command . You need to provide some additional configuration files in your repositories for this command to work. Configuration \u00b6 Preview Templates \u00b6 You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder .preview-templates . For example .preview-templates/app-xy for your app app-xy . The create-preview command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview. deployment-config-repo/ \u251c\u2500\u2500 .preview-templates \u2502 \u2514\u2500\u2500 app-xy <- Can contain any files and folders \u2502 \u251c\u2500\u2500 values.yaml \u2502 \u2514\u2500\u2500 some-more-config-files-or-folders \u251c\u2500\u2500 app-xy-production \u251c\u2500\u2500 app-xy-staging \u251c\u2500\u2500 app-xy-test \u2514\u2500\u2500 app-xy-my-branch-c7003101-preview <- This is how a created preview looks by default \u251c\u2500\u2500 values.yaml <- e.g. image tag and route host are replaced in this one \u2514\u2500\u2500 some-more-config-files-or-folders .gitops.config.yaml \u00b6 Make sure that your app repository contains a .gitops.config.yaml file. This file provides all information to find repository, branch, and folder containing the template templates for host and namespace name replace values in template files (see deploy command for details on the key syntax) find repository and branch where the preview should be created (i.e. your deployment config repository ) message templates used to comment your pull request apiVersion : v2 applicationName : app-xy # messages: # optional section # previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\" # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\") previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld # template: # optional section # organisation: templates # optional (default: target.organisation) # repository: template-repo # optional (default: target.repository) # branch: master # optional (default: target.branch) # path: custom/${APPLICATION_NAME} # optional (default: '.preview-templates/${APPLICATION_NAME}') target : organisation : deployments repository : deployment-config-repo # branch: master # optional (defaults to repo's default branch) # namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview' # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview', # Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be # truncated if max namespace length exceeds `maxNamespaceLength` chars.) # maxNamespaceLength: 63 # optional (default: 53) replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : app.image value : registry.example.tld/my-app:${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Info If you currently use the old .gitops.config.yaml format ( v0 ) you may find this online converter helpful to transition to the current apiVersion v2 . Warning The old ( v0 ) version and apiVersion v1 are marked deprecated and will be removed in gitopscli version 6.0.0. Equivalent example: # old 'v0' format deploymentConfig : org : deployments repository : deployment-config-repo applicationName : app-xy previewConfig : route : host : template : app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : - path : image.tag variable : GIT_COMMIT - path : route.host variable : ROUTE_HOST # v2 format apiVersion : v2 applicationName : app-xy previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld target : organisation : deployments repository : deployment-config-repo namespace : ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : image.tag value : ${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Variables \u00b6 APPLICATION_NAME : value from applicationName GIT_HASH : create-preview : The CLI provided --git-hash create-pr-preview : The git hash of the app repository commit that will be deployed PREVIEW_ID : create-preview : The CLI provided --preview-id create-pr-preview : The branch name in the app repository PREVIEW_ID_HASH : The first 8 characters of the SHA256 hash of PREVIEW_ID PREVIEW_ID_HASH_SHORT : The first 3 characters of the SHA256 hash of PREVIEW_ID PREVIEW_NAMESPACE : The resulting value of previewConfig.target.namespace PREVIEW_HOST : The resulting value of previewConfig.host Returned Information \u00b6 After running this command you'll find a YAML file at /tmp/gitopscli-preview-info.yaml . It contains generated information about your preview environment: previewId : PREVIEW_ID previewIdHash : 685912d3 routeHost : app.xy-685912d3.example.tld namespace : my-app-685912d3-preview Example \u00b6 gitopscli create-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"app-xy\" \\ --git-hash \"c0784a34e834117e1489973327ff4ff3c2582b94\" \\ --preview-id \"test-preview-id\" \\ Usage \u00b6 usage: gitopscli create-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --preview-id PREVIEW_ID [-v [VERBOSE]] options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --git-hash GIT_HASH the git hash which should be deployed --preview-id PREVIEW_ID The user-defined preview ID -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"create-preview"},{"location":"commands/create-preview/#create-preview","text":"The create-preview command can be used to create a preview environment in your deployment config repository for a commit hash of your app repository . You can later easily delete this preview with the delete-preview command . You need to provide some additional configuration files in your repositories for this command to work.","title":"create-preview"},{"location":"commands/create-preview/#configuration","text":"","title":"Configuration"},{"location":"commands/create-preview/#preview-templates","text":"You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder .preview-templates . For example .preview-templates/app-xy for your app app-xy . The create-preview command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview. deployment-config-repo/ \u251c\u2500\u2500 .preview-templates \u2502 \u2514\u2500\u2500 app-xy <- Can contain any files and folders \u2502 \u251c\u2500\u2500 values.yaml \u2502 \u2514\u2500\u2500 some-more-config-files-or-folders \u251c\u2500\u2500 app-xy-production \u251c\u2500\u2500 app-xy-staging \u251c\u2500\u2500 app-xy-test \u2514\u2500\u2500 app-xy-my-branch-c7003101-preview <- This is how a created preview looks by default \u251c\u2500\u2500 values.yaml <- e.g. image tag and route host are replaced in this one \u2514\u2500\u2500 some-more-config-files-or-folders","title":"Preview Templates"},{"location":"commands/create-preview/#gitopsconfigyaml","text":"Make sure that your app repository contains a .gitops.config.yaml file. This file provides all information to find repository, branch, and folder containing the template templates for host and namespace name replace values in template files (see deploy command for details on the key syntax) find repository and branch where the preview should be created (i.e. your deployment config repository ) message templates used to comment your pull request apiVersion : v2 applicationName : app-xy # messages: # optional section # previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\" # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\") previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld # template: # optional section # organisation: templates # optional (default: target.organisation) # repository: template-repo # optional (default: target.repository) # branch: master # optional (default: target.branch) # path: custom/${APPLICATION_NAME} # optional (default: '.preview-templates/${APPLICATION_NAME}') target : organisation : deployments repository : deployment-config-repo # branch: master # optional (defaults to repo's default branch) # namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview' # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview', # Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be # truncated if max namespace length exceeds `maxNamespaceLength` chars.) # maxNamespaceLength: 63 # optional (default: 53) replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : app.image value : registry.example.tld/my-app:${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Info If you currently use the old .gitops.config.yaml format ( v0 ) you may find this online converter helpful to transition to the current apiVersion v2 . Warning The old ( v0 ) version and apiVersion v1 are marked deprecated and will be removed in gitopscli version 6.0.0. Equivalent example: # old 'v0' format deploymentConfig : org : deployments repository : deployment-config-repo applicationName : app-xy previewConfig : route : host : template : app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : - path : image.tag variable : GIT_COMMIT - path : route.host variable : ROUTE_HOST # v2 format apiVersion : v2 applicationName : app-xy previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld target : organisation : deployments repository : deployment-config-repo namespace : ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : image.tag value : ${GIT_HASH} - path : route.host value : ${PREVIEW_HOST}","title":".gitops.config.yaml"},{"location":"commands/create-preview/#variables","text":"APPLICATION_NAME : value from applicationName GIT_HASH : create-preview : The CLI provided --git-hash create-pr-preview : The git hash of the app repository commit that will be deployed PREVIEW_ID : create-preview : The CLI provided --preview-id create-pr-preview : The branch name in the app repository PREVIEW_ID_HASH : The first 8 characters of the SHA256 hash of PREVIEW_ID PREVIEW_ID_HASH_SHORT : The first 3 characters of the SHA256 hash of PREVIEW_ID PREVIEW_NAMESPACE : The resulting value of previewConfig.target.namespace PREVIEW_HOST : The resulting value of previewConfig.host","title":"Variables"},{"location":"commands/create-preview/#returned-information","text":"After running this command you'll find a YAML file at /tmp/gitopscli-preview-info.yaml . It contains generated information about your preview environment: previewId : PREVIEW_ID previewIdHash : 685912d3 routeHost : app.xy-685912d3.example.tld namespace : my-app-685912d3-preview","title":"Returned Information"},{"location":"commands/create-preview/#example","text":"gitopscli create-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"app-xy\" \\ --git-hash \"c0784a34e834117e1489973327ff4ff3c2582b94\" \\ --preview-id \"test-preview-id\" \\","title":"Example"},{"location":"commands/create-preview/#usage","text":"usage: gitopscli create-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --preview-id PREVIEW_ID [-v [VERBOSE]] options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --git-hash GIT_HASH the git hash which should be deployed --preview-id PREVIEW_ID The user-defined preview ID -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"Usage"},{"location":"commands/delete-pr-preview/","text":"delete-pr-preview \u00b6 The delete-pr-preview command can be used to delete a preview previously created with the create-pr-preview command . Please refer to create-pr-preview documentation for the needed configuration files. Example \u00b6 gitopscli delete-pr-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"app-xy\" \\ --branch \"my-pr-branch\" \\ Usage \u00b6 usage: gitopscli delete-pr-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --branch BRANCH [--expect-preview-exists [EXPECT_PREVIEW_EXISTS]] [-v [VERBOSE]] options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --branch BRANCH The branch for which the preview was created for --expect-preview-exists [EXPECT_PREVIEW_EXISTS] Fail if preview does not exist -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"delete-pr-preview"},{"location":"commands/delete-pr-preview/#delete-pr-preview","text":"The delete-pr-preview command can be used to delete a preview previously created with the create-pr-preview command . Please refer to create-pr-preview documentation for the needed configuration files.","title":"delete-pr-preview"},{"location":"commands/delete-pr-preview/#example","text":"gitopscli delete-pr-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"app-xy\" \\ --branch \"my-pr-branch\" \\","title":"Example"},{"location":"commands/delete-pr-preview/#usage","text":"usage: gitopscli delete-pr-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --branch BRANCH [--expect-preview-exists [EXPECT_PREVIEW_EXISTS]] [-v [VERBOSE]] options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --branch BRANCH The branch for which the preview was created for --expect-preview-exists [EXPECT_PREVIEW_EXISTS] Fail if preview does not exist -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"Usage"},{"location":"commands/delete-preview/","text":"delete-preview \u00b6 The delete-preview command can be used to delete a preview previously created with the create-preview command . Please refer to create-preview documentation for the needed configuration files. Example \u00b6 gitopscli delete-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"app-xy\" \\ --preview-id \"test123\" \\ Usage \u00b6 usage: gitopscli delete-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --preview-id PREVIEW_ID [--expect-preview-exists [EXPECT_PREVIEW_EXISTS]] [-v [VERBOSE]] options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --preview-id PREVIEW_ID The user-defined preview ID --expect-preview-exists [EXPECT_PREVIEW_EXISTS] Fail if preview does not exist -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"delete-preview"},{"location":"commands/delete-preview/#delete-preview","text":"The delete-preview command can be used to delete a preview previously created with the create-preview command . Please refer to create-preview documentation for the needed configuration files.","title":"delete-preview"},{"location":"commands/delete-preview/#example","text":"gitopscli delete-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"app-xy\" \\ --preview-id \"test123\" \\","title":"Example"},{"location":"commands/delete-preview/#usage","text":"usage: gitopscli delete-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --preview-id PREVIEW_ID [--expect-preview-exists [EXPECT_PREVIEW_EXISTS]] [-v [VERBOSE]] options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --preview-id PREVIEW_ID The user-defined preview ID --expect-preview-exists [EXPECT_PREVIEW_EXISTS] Fail if preview does not exist -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"Usage"},{"location":"commands/deploy/","text":"deploy \u00b6 The deploy command can be used to deploy applications by updating the image tags in the YAML files of a config repository. Of course, you can also use it to update any YAML values in a git repository. However, only one YAML can be changed at a time. Example \u00b6 Let's assume you have a repository deployment/myapp-non-prod which contains your deployment configuration in the form of YAML files (e.g. Helm charts). To deploy a new version of your application you need to update some values in example/values.yaml . # Example Helm values.yaml frontend : repository : my-app/frontend tag : 1.0.0 # <- you want to change this value backend : repository : my-app/backend tag : 1.0.0 # <- and this one env : - name : TEST value : foo # <- and this one in a list, selected via sibling value 'TEST' With the following command GitOps CLI will update all values on the default branch. gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"myapp-non-prod\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\" You could also use the list index to replace the latter ( my-app.env.[0].value ). For more details on the underlying JSONPath syntax, please refer to the documenatation of the used library jsonpath-ng . Number Of Commits \u00b6 Note that by default GitOps CLI will create a separate commit for every value change: commit 0dcaa136b4c5249576bb1f40b942bff6ac718144 Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'backend.env[?name=='TEST'].value' to 'bar' in example/values.yaml commit d98913ad8fecf571d5f8c3635f8070b05c43a9ca Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'backend.tag' to '1.1.0' in example/values.yaml commit 649bc72fe798891244c11809afc9fae83309772a Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'frontend.tag' to '1.1.0' in example/values.yaml If you prefer to create a single commit for all changes add --single-commit to the command: commit 3b96839e90c35b8decf89f34a65ab6d66c8bab28 Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:00 2020 +0100 updated 3 values in example/values.yaml frontend.tag: '1.1.0' backend.tag: '1.1.0' 'backend.env[?name==''TEST''].value': 'bar' Specific Commit Message \u00b6 If you want to specify the commit message of the deployment then you can use the following param: --commit-message gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"myapp-non-prod\" \\ --commit-message \"test commit message\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\" This will end up in one single commit with your specified commit-message. Create Pull Request \u00b6 In some cases you might want to create a pull request for your updates. You can achieve this by adding --create-pr to the command. The pull request can be left open or merged directly with --auto-merge . gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"myapp-non-prod\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\" \\ --create-pr \\ --auto-merge Usage \u00b6 usage: gitopscli deploy [-h] --file FILE --values VALUES [--single-commit [SINGLE_COMMIT]] [--commit-message COMMIT_MESSAGE] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]] [--merge-method MERGE_METHOD] [-v [VERBOSE]] options: -h, --help show this help message and exit --file FILE YAML file path --values VALUES YAML/JSON object with the YAML path as key and the desired value as value --single-commit [SINGLE_COMMIT] Create only single commit for all updates --commit-message COMMIT_MESSAGE Specify exact commit message of deployment commit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --create-pr [CREATE_PR] Creates a Pull Request --auto-merge [AUTO_MERGE] Automatically merge the created PR (only valid with --create-pr) --merge-method MERGE_METHOD Merge Method (e.g., 'squash', 'rebase', 'merge') (default: merge) --json [JSON] Print a JSON object containing deployment information --pr-labels PR_LABELS JSON array pr labels (Gitlab, Github supported) --merge-parameters MERGE_PARAMETERS JSON object pr parameters (only Gitlab supported) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"deploy"},{"location":"commands/deploy/#deploy","text":"The deploy command can be used to deploy applications by updating the image tags in the YAML files of a config repository. Of course, you can also use it to update any YAML values in a git repository. However, only one YAML can be changed at a time.","title":"deploy"},{"location":"commands/deploy/#example","text":"Let's assume you have a repository deployment/myapp-non-prod which contains your deployment configuration in the form of YAML files (e.g. Helm charts). To deploy a new version of your application you need to update some values in example/values.yaml . # Example Helm values.yaml frontend : repository : my-app/frontend tag : 1.0.0 # <- you want to change this value backend : repository : my-app/backend tag : 1.0.0 # <- and this one env : - name : TEST value : foo # <- and this one in a list, selected via sibling value 'TEST' With the following command GitOps CLI will update all values on the default branch. gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"myapp-non-prod\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\" You could also use the list index to replace the latter ( my-app.env.[0].value ). For more details on the underlying JSONPath syntax, please refer to the documenatation of the used library jsonpath-ng .","title":"Example"},{"location":"commands/deploy/#number-of-commits","text":"Note that by default GitOps CLI will create a separate commit for every value change: commit 0dcaa136b4c5249576bb1f40b942bff6ac718144 Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'backend.env[?name=='TEST'].value' to 'bar' in example/values.yaml commit d98913ad8fecf571d5f8c3635f8070b05c43a9ca Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'backend.tag' to '1.1.0' in example/values.yaml commit 649bc72fe798891244c11809afc9fae83309772a Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'frontend.tag' to '1.1.0' in example/values.yaml If you prefer to create a single commit for all changes add --single-commit to the command: commit 3b96839e90c35b8decf89f34a65ab6d66c8bab28 Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:00 2020 +0100 updated 3 values in example/values.yaml frontend.tag: '1.1.0' backend.tag: '1.1.0' 'backend.env[?name==''TEST''].value': 'bar'","title":"Number Of Commits"},{"location":"commands/deploy/#specific-commit-message","text":"If you want to specify the commit message of the deployment then you can use the following param: --commit-message gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"myapp-non-prod\" \\ --commit-message \"test commit message\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\" This will end up in one single commit with your specified commit-message.","title":"Specific Commit Message"},{"location":"commands/deploy/#create-pull-request","text":"In some cases you might want to create a pull request for your updates. You can achieve this by adding --create-pr to the command. The pull request can be left open or merged directly with --auto-merge . gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"myapp-non-prod\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0, 'backend.env[?name==''TEST''].value': bar}\" \\ --create-pr \\ --auto-merge","title":"Create Pull Request"},{"location":"commands/deploy/#usage","text":"usage: gitopscli deploy [-h] --file FILE --values VALUES [--single-commit [SINGLE_COMMIT]] [--commit-message COMMIT_MESSAGE] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]] [--merge-method MERGE_METHOD] [-v [VERBOSE]] options: -h, --help show this help message and exit --file FILE YAML file path --values VALUES YAML/JSON object with the YAML path as key and the desired value as value --single-commit [SINGLE_COMMIT] Create only single commit for all updates --commit-message COMMIT_MESSAGE Specify exact commit message of deployment commit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --create-pr [CREATE_PR] Creates a Pull Request --auto-merge [AUTO_MERGE] Automatically merge the created PR (only valid with --create-pr) --merge-method MERGE_METHOD Merge Method (e.g., 'squash', 'rebase', 'merge') (default: merge) --json [JSON] Print a JSON object containing deployment information --pr-labels PR_LABELS JSON array pr labels (Gitlab, Github supported) --merge-parameters MERGE_PARAMETERS JSON object pr parameters (only Gitlab supported) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"Usage"},{"location":"commands/sync-apps/","text":"sync-apps \u00b6 The sync-apps command can be used to keep a root config repository in sync with several app config repositories . You can use this command if your config repositories are structured in the following (opinionated) way: Repository Structure \u00b6 App Config Repositories \u00b6 You have 1..n config repositories for the deployment configurations of your applications (e.g. one per team). Every app config repository can contain 0..n directories (e.g. containing Helm charts). Directories starting with a dot will be ignored. Example: team-1-app-config-repo/ \u251c\u2500\u2500 .this-will-be-ignored \u251c\u2500\u2500 app-xy-production \u251c\u2500\u2500 app-xy-staging \u2514\u2500\u2500 app-xy-test Root Config Repository \u00b6 The root config repository acts as a single entrypoint for your GitOps continous delivery tool (e.g. Argo CD ). Here you define all applications in your cluster and link to the app config repositories with their deployment configurations. It is structured in the following way: root-config-repo/ \u251c\u2500\u2500 apps \u2502 \u251c\u2500\u2500 team-a.yaml \u2502 \u2514\u2500\u2500 team-b.yaml \u2514\u2500\u2500 bootstrap \u2514\u2500\u2500 values.yaml app specific values \u00b6 app specific values may be set using a .config.yaml file directly in the app directory. gitopscli will process these values and add them under customAppConfig parameter of application tenantrepo.git/app1/app_value_file.yaml customvalue : test rootrepo.git/apps/tenantrepo.yaml config : repository : https://tenantrepo.git applications : app1 : customAppConfig : customvalue : test app2 : {} bootstrap/values.yaml bootstrap : - name : team-a # <- every entry links to a YAML file in the `apps/` directory - name : team-b Alternative, when using a Chart as dependency with an alias 'config': config : bootstrap : - name : team-a # <- every entry links to a YAML file in the `apps/` directory - name : team-b apps/team-a.yaml repository : https://github.com/company-deployments/team-1-app-config-repo.git # link to your apps root repository # The applications that are synced by the `sync-app` command: applications : app-xy-production : # <- every entry corresponds to a directory in the apps root repository app-xy-staging : app-xy-test : or config : repository : https://github.com/company-deployments/team-1-app-config-repo.git # link to your apps root repository # The applications that are synced by the `sync-app` command: applications : app-xy-production : # <- every entry corresponds to a directory in the apps root repository app-xy-staging : app-xy-test : Example \u00b6 gitopscli sync-apps \\ --git-provider-url github \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"company-deployments\" \\ --repository-name \"team-1-app-config-repo\" \\ --root-organisation \"company-deployments\" \\ --root-repository-name \"root-config-repo\" Usage \u00b6 usage: gitopscli sync-apps [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [-v [VERBOSE]] --root-organisation ROOT_ORGANISATION --root-repository-name ROOT_REPOSITORY_NAME options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging --root-organisation ROOT_ORGANISATION Root config repository organisation --root-repository-name ROOT_REPOSITORY_NAME Root config repository name","title":"sync-apps"},{"location":"commands/sync-apps/#sync-apps","text":"The sync-apps command can be used to keep a root config repository in sync with several app config repositories . You can use this command if your config repositories are structured in the following (opinionated) way:","title":"sync-apps"},{"location":"commands/sync-apps/#repository-structure","text":"","title":"Repository Structure"},{"location":"commands/sync-apps/#app-config-repositories","text":"You have 1..n config repositories for the deployment configurations of your applications (e.g. one per team). Every app config repository can contain 0..n directories (e.g. containing Helm charts). Directories starting with a dot will be ignored. Example: team-1-app-config-repo/ \u251c\u2500\u2500 .this-will-be-ignored \u251c\u2500\u2500 app-xy-production \u251c\u2500\u2500 app-xy-staging \u2514\u2500\u2500 app-xy-test","title":"App Config Repositories"},{"location":"commands/sync-apps/#root-config-repository","text":"The root config repository acts as a single entrypoint for your GitOps continous delivery tool (e.g. Argo CD ). Here you define all applications in your cluster and link to the app config repositories with their deployment configurations. It is structured in the following way: root-config-repo/ \u251c\u2500\u2500 apps \u2502 \u251c\u2500\u2500 team-a.yaml \u2502 \u2514\u2500\u2500 team-b.yaml \u2514\u2500\u2500 bootstrap \u2514\u2500\u2500 values.yaml","title":"Root Config Repository"},{"location":"commands/sync-apps/#app-specific-values","text":"app specific values may be set using a .config.yaml file directly in the app directory. gitopscli will process these values and add them under customAppConfig parameter of application tenantrepo.git/app1/app_value_file.yaml customvalue : test rootrepo.git/apps/tenantrepo.yaml config : repository : https://tenantrepo.git applications : app1 : customAppConfig : customvalue : test app2 : {} bootstrap/values.yaml bootstrap : - name : team-a # <- every entry links to a YAML file in the `apps/` directory - name : team-b Alternative, when using a Chart as dependency with an alias 'config': config : bootstrap : - name : team-a # <- every entry links to a YAML file in the `apps/` directory - name : team-b apps/team-a.yaml repository : https://github.com/company-deployments/team-1-app-config-repo.git # link to your apps root repository # The applications that are synced by the `sync-app` command: applications : app-xy-production : # <- every entry corresponds to a directory in the apps root repository app-xy-staging : app-xy-test : or config : repository : https://github.com/company-deployments/team-1-app-config-repo.git # link to your apps root repository # The applications that are synced by the `sync-app` command: applications : app-xy-production : # <- every entry corresponds to a directory in the apps root repository app-xy-staging : app-xy-test :","title":"app specific values"},{"location":"commands/sync-apps/#example","text":"gitopscli sync-apps \\ --git-provider-url github \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"company-deployments\" \\ --repository-name \"team-1-app-config-repo\" \\ --root-organisation \"company-deployments\" \\ --root-repository-name \"root-config-repo\"","title":"Example"},{"location":"commands/sync-apps/#usage","text":"usage: gitopscli sync-apps [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [-v [VERBOSE]] --root-organisation ROOT_ORGANISATION --root-repository-name ROOT_REPOSITORY_NAME options: -h, --help show this help message and exit --username USERNAME Git username (alternative: GITOPSCLI_USERNAME env variable) --password PASSWORD Git password or token (alternative: GITOPSCLI_PASSWORD env variable) --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging --root-organisation ROOT_ORGANISATION Root config repository organisation --root-repository-name ROOT_REPOSITORY_NAME Root config repository name","title":"Usage"},{"location":"commands/version/","text":"version \u00b6 The version command shows the GitOps CLI version information. Example \u00b6 gitopscli version Usage \u00b6 usage: gitopscli version [-h] options: -h, --help show this help message and exit","title":"version"},{"location":"commands/version/#version","text":"The version command shows the GitOps CLI version information.","title":"version"},{"location":"commands/version/#example","text":"gitopscli version","title":"Example"},{"location":"commands/version/#usage","text":"usage: gitopscli version [-h] options: -h, --help show this help message and exit","title":"Usage"},{"location":"includes/preview-configuration/","text":"Configuration \u00b6 Preview Templates \u00b6 You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder .preview-templates . For example .preview-templates/app-xy for your app app-xy . The create-preview command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview. deployment-config-repo/ \u251c\u2500\u2500 .preview-templates \u2502 \u2514\u2500\u2500 app-xy <- Can contain any files and folders \u2502 \u251c\u2500\u2500 values.yaml \u2502 \u2514\u2500\u2500 some-more-config-files-or-folders \u251c\u2500\u2500 app-xy-production \u251c\u2500\u2500 app-xy-staging \u251c\u2500\u2500 app-xy-test \u2514\u2500\u2500 app-xy-my-branch-c7003101-preview <- This is how a created preview looks by default \u251c\u2500\u2500 values.yaml <- e.g. image tag and route host are replaced in this one \u2514\u2500\u2500 some-more-config-files-or-folders .gitops.config.yaml \u00b6 Make sure that your app repository contains a .gitops.config.yaml file. This file provides all information to find repository, branch, and folder containing the template templates for host and namespace name replace values in template files (see deploy command for details on the key syntax) find repository and branch where the preview should be created (i.e. your deployment config repository ) message templates used to comment your pull request apiVersion : v2 applicationName : app-xy # messages: # optional section # previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\" # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\") previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld # template: # optional section # organisation: templates # optional (default: target.organisation) # repository: template-repo # optional (default: target.repository) # branch: master # optional (default: target.branch) # path: custom/${APPLICATION_NAME} # optional (default: '.preview-templates/${APPLICATION_NAME}') target : organisation : deployments repository : deployment-config-repo # branch: master # optional (defaults to repo's default branch) # namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview' # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview', # Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be # truncated if max namespace length exceeds `maxNamespaceLength` chars.) # maxNamespaceLength: 63 # optional (default: 53) replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : app.image value : registry.example.tld/my-app:${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Info If you currently use the old .gitops.config.yaml format ( v0 ) you may find this online converter helpful to transition to the current apiVersion v2 . Warning The old ( v0 ) version and apiVersion v1 are marked deprecated and will be removed in gitopscli version 6.0.0. Equivalent example: # old 'v0' format deploymentConfig : org : deployments repository : deployment-config-repo applicationName : app-xy previewConfig : route : host : template : app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : - path : image.tag variable : GIT_COMMIT - path : route.host variable : ROUTE_HOST # v2 format apiVersion : v2 applicationName : app-xy previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld target : organisation : deployments repository : deployment-config-repo namespace : ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : image.tag value : ${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Variables \u00b6 APPLICATION_NAME : value from applicationName GIT_HASH : create-preview : The CLI provided --git-hash create-pr-preview : The git hash of the app repository commit that will be deployed PREVIEW_ID : create-preview : The CLI provided --preview-id create-pr-preview : The branch name in the app repository PREVIEW_ID_HASH : The first 8 characters of the SHA256 hash of PREVIEW_ID PREVIEW_ID_HASH_SHORT : The first 3 characters of the SHA256 hash of PREVIEW_ID PREVIEW_NAMESPACE : The resulting value of previewConfig.target.namespace PREVIEW_HOST : The resulting value of previewConfig.host","title":"Preview configuration"},{"location":"includes/preview-configuration/#configuration","text":"","title":"Configuration"},{"location":"includes/preview-configuration/#preview-templates","text":"You have to provide a folder with the deployment configuration templates for every application you want to use this command for. By default it is assumed that this folder is located in your deployment config repository under the top-level folder .preview-templates . For example .preview-templates/app-xy for your app app-xy . The create-preview command simply copies this directory to the root of your deployment config repository and replaces e.g. image tag and route host which are specific to this preview. deployment-config-repo/ \u251c\u2500\u2500 .preview-templates \u2502 \u2514\u2500\u2500 app-xy <- Can contain any files and folders \u2502 \u251c\u2500\u2500 values.yaml \u2502 \u2514\u2500\u2500 some-more-config-files-or-folders \u251c\u2500\u2500 app-xy-production \u251c\u2500\u2500 app-xy-staging \u251c\u2500\u2500 app-xy-test \u2514\u2500\u2500 app-xy-my-branch-c7003101-preview <- This is how a created preview looks by default \u251c\u2500\u2500 values.yaml <- e.g. image tag and route host are replaced in this one \u2514\u2500\u2500 some-more-config-files-or-folders","title":"Preview Templates"},{"location":"includes/preview-configuration/#gitopsconfigyaml","text":"Make sure that your app repository contains a .gitops.config.yaml file. This file provides all information to find repository, branch, and folder containing the template templates for host and namespace name replace values in template files (see deploy command for details on the key syntax) find repository and branch where the preview should be created (i.e. your deployment config repository ) message templates used to comment your pull request apiVersion : v2 applicationName : app-xy # messages: # optional section # previewEnvCreated: \"Created preview at revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"New preview environment created for version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvUpdated: \"Updated preview to revision ${GIT_HASH}. You can access it here: https://${PREVIEW_HOST}/some-fancy-path\" # optional (default: \"Preview environment updated to version `${GIT_HASH}`. Access it here: https://${PREVIEW_HOST}\") # previewEnvAlreadyUpToDate: \"Your preview is already up-to-date with revision ${GIT_HASH}.\" # optional (default: \"The version `${GIT_HASH}` has already been deployed. Access it here: https://${PREVIEW_HOST}\") previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld # template: # optional section # organisation: templates # optional (default: target.organisation) # repository: template-repo # optional (default: target.repository) # branch: master # optional (default: target.branch) # path: custom/${APPLICATION_NAME} # optional (default: '.preview-templates/${APPLICATION_NAME}') target : organisation : deployments repository : deployment-config-repo # branch: master # optional (defaults to repo's default branch) # namespace: ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview' # optional (default: '${APPLICATION_NAME}-${PREVIEW_ID}-${PREVIEW_ID_HASH_SHORT}-preview', # Invalid characters in PREVIEW_ID will be replaced. PREVIEW_ID will be # truncated if max namespace length exceeds `maxNamespaceLength` chars.) # maxNamespaceLength: 63 # optional (default: 53) replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : app.image value : registry.example.tld/my-app:${GIT_HASH} - path : route.host value : ${PREVIEW_HOST} Info If you currently use the old .gitops.config.yaml format ( v0 ) you may find this online converter helpful to transition to the current apiVersion v2 . Warning The old ( v0 ) version and apiVersion v1 are marked deprecated and will be removed in gitopscli version 6.0.0. Equivalent example: # old 'v0' format deploymentConfig : org : deployments repository : deployment-config-repo applicationName : app-xy previewConfig : route : host : template : app-xy-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : - path : image.tag variable : GIT_COMMIT - path : route.host variable : ROUTE_HOST # v2 format apiVersion : v2 applicationName : app-xy previewConfig : host : ${PREVIEW_NAMESPACE}.example.tld target : organisation : deployments repository : deployment-config-repo namespace : ${APPLICATION_NAME}-${PREVIEW_ID_HASH}-preview replace : Chart.yaml : - path : name value : ${PREVIEW_NAMESPACE} values.yaml : - path : image.tag value : ${GIT_HASH} - path : route.host value : ${PREVIEW_HOST}","title":".gitops.config.yaml"},{"location":"includes/preview-configuration/#variables","text":"APPLICATION_NAME : value from applicationName GIT_HASH : create-preview : The CLI provided --git-hash create-pr-preview : The git hash of the app repository commit that will be deployed PREVIEW_ID : create-preview : The CLI provided --preview-id create-pr-preview : The branch name in the app repository PREVIEW_ID_HASH : The first 8 characters of the SHA256 hash of PREVIEW_ID PREVIEW_ID_HASH_SHORT : The first 3 characters of the SHA256 hash of PREVIEW_ID PREVIEW_NAMESPACE : The resulting value of previewConfig.target.namespace PREVIEW_HOST : The resulting value of previewConfig.host","title":"Variables"}]}